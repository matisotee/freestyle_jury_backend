name: Test, build and deploy to QA
on:
  push:
    branches:
      - master
jobs:
  Deploy:
    runs-on: ubuntu-latest
    env:
      OS: 'ubuntu-latest'
      PYTHON: '3.8'
    steps:
    - uses: actions/checkout@master
      with:
        fetch-depth: '0'
    # TEST
    - name: Set up Python 3.x
      uses: actions/setup-python@v2
      with:
        python-version: '3.8'
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8
        pip install -r requirements.txt
    - name: Linting
      run: |
        flake8
      env:
        SECRET_KEY: ${{ secrets.SECRET_KEY }}
    - name: Unit Test
      run: |
        pytest test/unit --cov=./ --cov-report=xml
      env:
        SECRET_KEY: ${{ secrets.SECRET_KEY }}
    - name: Coverage
      uses: codecov/codecov-action@v1
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        file: ./coverage.xml
        env_vars: OS,PYTHON
        name: codecov-umbrella
        fail_ci_if_error: true
    #DEPLOY
    - name: Bump version and push tag
      uses: anothrNick/github-tag-action@1.26.0
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        WITH_V: false
    - name: Get Previous tag
      id: previoustag
      uses: "WyriHaximus/github-action-get-previous-tag@master"
    - name: Deploy to Dockerhub
      uses: elgohr/Publish-Docker-Github-Action@master
      with:
        name: matisotee/freestyle-jury-api-qa
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        tags: "latest,${{ steps.previoustag.outputs.tag }}"
    - name: Deploy to Heroku QA
      uses: akhileshns/heroku-deploy@v3.5.6
      with:
        heroku_api_key: ${{ secrets.HEROKU_API_KEY }}
        heroku_app_name: ${{ secrets.HEROKU_APP_NAME }}
        heroku_email: ${{ secrets.HEROKU_EMAIL }}
        usedocker: true

  Slack:
    name: Slack
    needs: publish # set needs only last job except this job
    runs-on: ubuntu-latest
    if: always() # set always
    steps:
      # run this action to get workflow conclusion
      # You can get conclusion via env (env.WORKFLOW_CONCLUSION)
      - uses: technote-space/workflow-conclusion-action@v1
      - uses: 8398a7/action-slack@v2
        with:
          # status: ${{ env.WORKFLOW_CONCLUSION }} # neutral, success, cancelled, timed_out, failure
          status: failure
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        if: env.WORKFLOW_CONCLUSION == 'failure' # notify only if failure
